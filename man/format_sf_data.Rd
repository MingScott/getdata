% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_sf_data.R
\name{format_sf_data}
\alias{format_sf_data}
\alias{relocate_sf_col}
\alias{rename_sf_col}
\alias{bind_boundary_col}
\alias{bind_units_col}
\title{Format simple feature data}
\usage{
format_sf_data(
  x,
  crs = getOption("getdata.crs", default = 3857),
  erase = FALSE,
  erase_data = NULL,
  dTolerance = NULL,
  smooth = FALSE,
  sf_col = "geometry",
  sf_req = TRUE,
  ...
)

relocate_sf_col(x, .after = dplyr::everything())

rename_sf_col(x, sf_col = "geometry")

bind_boundary_col(x, boundary = NULL, join = NULL, col = "name", ...)

bind_units_col(x, y, units = NULL, drop = FALSE, keep_all = TRUE, .id = NULL)
}
\arguments{
\item{x}{object of class \code{sfg}, \code{sfc} or \code{sf}}

\item{crs}{Coordinate reference system for returned data, Default: getOption("getdata.crs", default =
3857)}

\item{erase}{If TRUE, pass `data` and `erase_data` to [overedge::st_erase],
Default: `FALSE`}

\item{erase_data}{A `sf`, `sfc`, or `bbox` object with the geometry to erase
from data, Default: `NULL`}

\item{dTolerance}{numeric; tolerance parameter, specified for all or for each
feature geometry. If you run \code{st_simplify}, the input data is
specified with long-lat coordinates and \code{sf_use_s2()} returns
\code{TRUE}, then the value of \code{dTolerance} must be specified in
meters.}

\item{smooth}{If `TRUE`, smooth data with [smoothr::smooth] using default
method and parameters, Default: `FALSE`.}

\item{sf_col}{Name to use for the sf column after renaming; defaults to "geometry".}

\item{sf_req}{If `TRUE`, data must be a `sf` object. If `FALSE`, data is
passed to [overedge::as_sf] to convert data to an `sf` object.}

\item{...}{Additional parameters passed to `format_data`}

\item{.after}{The location to place sf column after; defaults to
[dplyr::everything].}

\item{boundary}{An sf object with a column named "name" or a list of sf
objects where all items in the list have a "name" column.}

\item{join}{geometry predicate function; defaults to `NULL`, set to
[sf::st_intersects] if key_list contains only POLYGON or MULTIPOLYGON objects
or [sf::st_nearest_feature] if key_list contains other types.}

\item{y}{Vector of numeric or units values to bind to x.}

\item{units}{Units to use for y (if numeric) or convert to (if y is units
class); defaults to `NULL`.}

\item{drop}{If `TRUE`, apply the [units::drop_units] function to the column
with units class values and return numeric values instead; defaults to
`FALSE`.}

\item{keep_all}{If `FALSE`, keep all columns. If `FALSE`, return only the
named .id column.}

\item{.id}{Name to use for vector of units provided to "y" parameter, when
"y" is bound to the "x" data frame or tibble as a new column.}

\item{data}{A `sf` object or, if `sf_req` is `FALSE`, any object that can be
converted to an `sf` object with [overedge::as_sf].}
}
\value{
A `sf` object with columns and geometry modified based parameters.
}
\description{
The main [format_sf_data] function is a wrapper for the following common
steps in transforming an `sf` object and preparing for mapping or analysis:
}
\details{
- Convert data to an `sf` object with [overedge::as_sf] if `sf_req` is `FALSE`
 - Make data valid with [sf::st_make_valid] if needed
 - Format data with [format_data] using the ... parameters
 - Erase any data overlapping with `erase_data` (suggested for use with water or open space)
 - Simplify geometry with [sf::st_simplify] if `dTolerance` is provided
 - Smooth geometry with [smoothr::smooth] if `smooth` is `TRUE`
 - Rename the sf column to match `sf_col` (defaults to "geometry")

 The helper functions for format_sf_data and additional formatting functions
 for `sf` data are described in the details.

Helper functions for [format_sf_data]:

- [rename_sf_col]: Rename `sf` column.
- [relocate_sf_col]: Relocate `sf` column after selected columns (defaults to [everything()]).


Additional formatting functions for `sf` objects:

 - [bind_boundary_col] uses [sf::st_join] to assign simple feature data to an
 enclosing polygon. This function with other join functions to add columns
 based on other spatial relationships, e.g. bind a column for the nearest
 point feature.
}
