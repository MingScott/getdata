% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_airtable_data.R
\name{get_airtable_data}
\alias{get_airtable_data}
\title{Get data from an Airtable base and optionally convert to a sf object}
\usage{
get_airtable_data(
  base,
  table,
  view = NULL,
  record = NULL,
  fields = NULL,
  filter = NULL,
  sort = NULL,
  desc = FALSE,
  max_records = NULL,
  per_page = NULL,
  cell_format = "json",
  tz = NULL,
  locale = NULL,
  fields_by_id = FALSE,
  offset = NULL,
  list = "records",
  geometry = FALSE,
  location = NULL,
  dist = getOption("getdata.dist"),
  diag_ratio = getOption("getdata.diag_ratio"),
  unit = getOption("getdata.unit", "meter"),
  asp = getOption("getdata.asp"),
  crs = getOption("getdata.crs", 3857),
  coords = getOption("getdata.coords", c("lon", "lat")),
  from_crs = getOption("getdata.from_crs", 4326),
  remove_coords = TRUE,
  address = getOption("getdata.address", "address"),
  geo = FALSE,
  clean_names = TRUE,
  label = TRUE,
  token = NULL,
  type = "AIRTABLE_API_KEY"
)
}
\arguments{
\item{base}{Airtable base identifier. Required.}

\item{table}{Airtable table name or identifier. Required.}

\item{view}{Airtable view identifier, Default: \code{NULL}}

\item{record}{Airtable record identifier, Default: \code{NULL}}

\item{fields}{Fields to return from Airtable base, Default: \code{NULL}}

\item{filter}{Filter to apply to records, Note: This parameter is a
placeholder and is not currently implemented. Default: \code{NULL}}

\item{sort}{Field to sort by, Default: \code{NULL}}

\item{desc}{If \code{TRUE}, sort in descending order, Default: \code{FALSE}}

\item{max_records}{Maximum number of records to return, Default: \code{NULL}. If
max_records is larger than 100, the offset parameter is used to return
multiple pages of a results in a single dataframe.}

\item{per_page}{Max records to return per page, Default: \code{NULL}}

\item{cell_format}{Cell format for "Link to another record" fields (either
"json" (unique ID) or "string" (displayed character string)), Default:
'json'}

\item{tz, locale}{Time zone and locale, Defaults: \code{NULL}}

\item{fields_by_id}{If \code{TRUE}, return fields by id, Default: \code{FALSE}}

\item{offset}{Offset parameter, Default: \code{NULL}}

\item{list}{Data type to return, Default: "records". Set list to "resp" to
return the API response without any additional formatting or conversion.}

\item{geometry}{If \code{TRUE}, convert data into a simple feature object.
Defaults to \code{FALSE}.}

\item{location}{sf object. If multiple areas are provided, they are unioned
into a single sf object using \link[sf:geos_combine]{sf::st_union}}

\item{dist}{buffer distance in units. Optional.}

\item{diag_ratio}{ratio of diagonal distance of area's bounding box used as
buffer distance. e.g. if the diagonal distance is 3000 meters and the
"diag_ratio = 0.1"  a 300 meter will be used. Ignored when \code{dist} is
provided.}

\item{unit}{Units for buffer. Supported options include "meter", "foot",
"kilometer", and "mile", "nautical mile" Common abbreviations (e.g. "km"
instead of "kilometer") are also supported. Distance in units is converted
to units matching GDAL units for x; defaults to "meter"}

\item{asp}{Aspect ratio of width to height as a numeric value (e.g. 0.33) or
character (e.g. "1:3"). If numeric, \code{\link[sfext:get_asp]{get_asp()}} returns the same value
without modification.}

\item{crs}{Cordinate reference system to return, Default: 4326 for
\code{\link[sfext:sf_to_df]{sf_to_df()}} and \code{NULL} for \code{\link[sfext:df_to_sf]{df_to_sf()}}.}

\item{coords}{Coordinate columns for input data.frame or output sf object (if
geometry is 'centroid' or 'point') Default: c("lon", "lat").}

\item{from_crs}{For \code{\link[sfext:df_to_sf]{df_to_sf()}}, coordinate reference system used by
coordinates or well known text in data frame.}

\item{remove_coords}{For \code{\link[sfext:df_to_sf]{df_to_sf()}}, if \code{TRUE}, remove the coordinate columns
after converting a data frame to simple feature object; defaults to
\code{FALSE}.}

\item{address}{Address column name passed to \code{\link[tidygeocoder:geocode]{tidygeocoder::geocode()}} or
\link[tidygeocoder:geo]{tidygeocoder::geo}}

\item{geo}{If \code{TRUE}, use \code{\link[sfext:address_to_sf]{address_to_sf()}} to geocode address column; defaults
to \code{FALSE}.}

\item{clean_names}{If \code{TRUE}, clean names provided to nm or created based on
value of col using \link[janitor:clean_names]{janitor::clean_names}. If \code{FALSE}, use names as
provided.}

\item{label}{label is optionally used by \link{map_location_data} to name the data
objects in the list returned by the function.}

\item{token, type}{API token and type, token defaults to \code{NULL} and type to
\code{"AIRTABLE_API_KEY"} (same as \code{get_access_token(type = "AIRTABLE_API_KEY")})}
}
\description{
Get data from an Airtable base using the Airtable API and the httr2 package.
If the base includes coordinate fields/columns, optionally convert the data
to a simple feature object using \code{\link[sfext:sf_to_df]{sfext::df_to_sf()}} if \code{geometry = TRUE}.
}
\details{
This function requires an Airtable API key which you can set using
\verb{set_access_token(token = <YOUR_API_KEY>, type = "AIRTABLE_API_KEY")}

Learn more about the Airtable API
\url{https://support.airtable.com/hc/en-us/articles/203313985-Public-REST-API} or
access the API for your Airtable base \url{https://airtable.com/api}
}
